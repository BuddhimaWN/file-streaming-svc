trigger:
- main  # Adjust as needed

pool:
  vmImage: 'ubuntu-latest'

variables:
  ACR_NAME: 'filestreamingcontainerregistry'
  IMAGE_NAME: 'filestreamingapp'
  TAG: 'latest'
  VM_IP: '$(VM_IP)'  # Ensure this variable is set in Azure DevOps

stages:
- stage: BuildAndPush
  displayName: 'Build and Push Docker Image'
  jobs:
  - job: BuildAndPushJob
    displayName: 'Build and Push'
    steps:

    - checkout: self  

    - task: AzureCLI@2
      displayName: 'Login to Azure'
      inputs:
        azureSubscription: 'RM'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az acr login --name $(ACR_NAME)

    - task: Docker@2
      displayName: 'Build Docker Image'
      inputs:
        command: 'build'
        Dockerfile: '**/Dockerfile'
        repository: '$(ACR_NAME).azurecr.io/$(IMAGE_NAME)'
        tags: '$(TAG)'

    - task: Docker@2
      displayName: 'Push Docker Image to ACR'
      inputs:
        command: 'push'
        repository: '$(ACR_NAME).azurecr.io/$(IMAGE_NAME)'
        tags: '$(TAG)'

- stage: DeployToVM
  displayName: 'Deploy Docker Image to VM'
  jobs:
  - job: DeployJob
    displayName: 'Deploy Docker Image'
    steps:

    - task: SSH@0
      displayName: 'Authenticate Azure CLI'
      inputs:
        sshEndpoint: 'file-streaming-vm-v4'
        runOptions: 'inline'
        inline: |
          echo "Authenticating Azure CLI..."
          az login --service-principal -u $(SP_APP_ID) -p $(SP_PASSWORD) --tenant $(TENANT_ID) || { echo "Azure CLI authentication failed!"; exit 1; }

    - task: SSH@0
      displayName: 'Clean Up Existing Containers and Free Port 3000'
      inputs:
        sshEndpoint: 'file-streaming-vm-v4'
        runOptions: 'inline'
        inline: |
          echo "Checking for existing container..."
          EXISTING_CONTAINER=$(docker ps -aq --filter "name=$(IMAGE_NAME)")
          
          if [ ! -z "$EXISTING_CONTAINER" ]; then
            echo "Stopping and removing existing container..."
            docker stop $EXISTING_CONTAINER || true
            docker rm $EXISTING_CONTAINER || true
            echo "Container removed successfully."
          else
            echo "No existing container found."
          fi

          echo "Checking if port 3000 is in use..."
          PORT_PID=$(sudo lsof -i:3000 -t)
          if [ ! -z "$PORT_PID" ]; then
            echo "Port 3000 is occupied by process $PORT_PID. Killing it..."
            sudo kill -9 $PORT_PID
            echo "Port 3000 is now free."
          else
            echo "Port 3000 is already free."
          fi

          echo "Checking if any Docker container is using port 3000..."
          DOCKER_PORT_3000=$(docker ps -q --filter "publish=3000")
          if [ ! -z "$DOCKER_PORT_3000" ]; then
            echo "A container is using port 3000. Stopping and removing it..."
            docker stop $DOCKER_PORT_3000 || true
            docker rm $DOCKER_PORT_3000 || true
          fi

          echo "Ensuring Docker networking is clear..."
          sudo systemctl restart docker
          echo "Docker service restarted."

    - task: SSH@0
      displayName: 'Pull and Run Docker Image on Port 3000'
      inputs:
        sshEndpoint: 'file-streaming-vm-v4'
        runOptions: 'inline'
        inline: |
          echo "Logging into ACR..."
          az acr login --name $(ACR_NAME) || { echo "Failed to log into ACR!"; exit 1; }

          echo "Pulling Docker image..."
          docker pull $(ACR_NAME).azurecr.io/$(IMAGE_NAME):$(TAG) || { echo "Failed to pull Docker image!"; exit 1; }

          echo "Running Docker container on port 3000..."
          docker run -d -p 3000:3000 --name $(IMAGE_NAME) $(ACR_NAME).azurecr.io/$(IMAGE_NAME):$(TAG) || { echo "Failed to run Docker container!"; exit 1; }

          echo "Container successfully started on port 3000."
